--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Then I inserted the Spotify Data .csv into the table.

---------------------------------------------------

--Next, I explored the data using the following SQL. 

--What is the average popularity and danceability by artist and track? 
SELECT artist_name, track_name, AVG(popularity), AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

--Who are the top 10 artists based on popularity? 
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc LIMIT 10; 

--Which songs have featured artists?
SELECT track_name
FROM BIT_DB.Spotifydata
WHERE track_name LIKE '%feat.%';

--How many of those feat. songs have over 90 in popularity? 
SELECT track_name, popularity
FROM BIT_DB.Spotifydata
WHERE track_name LIKE '%feat.%'
AND popularity >=90;

--Which artist has the longest average duration for their songs? Which one has the shortest? 
SELECT artist_name, AVG(duration_ms)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(duration_ms) desc LIMIT 1; 

SELECT artist_name, AVG(duration_ms)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(duration_ms) asc LIMIT 1; 

--What's the average danceability for the 10 most popular songs?
SELECT track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity desc LIMIT 10; 

--What are the top 3 most popular songs? 

SELECT track_name, MAX(popularity) OVER (PARTITION BY track_name) AS 'Top Star' 
FROM BIT_DB.Spotifydata
ORDER BY MAX(popularity) OVER (PARTITION BY track_name)desc
LIMIT 3; 

 
